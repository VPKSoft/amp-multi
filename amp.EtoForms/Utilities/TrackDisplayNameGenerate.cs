#region License
/*
MIT License

Copyright(c) 2022 Petteri Kautonen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion

using System.Text.RegularExpressions;
using amp.Database.DataModel;
using amp.EtoForms.Enumerations;
using amp.Shared.Interfaces;

namespace amp.EtoForms.Utilities;

/// <summary>
/// A class to generate display names for audio files.
/// </summary>
public static class TrackDisplayNameGenerate
{
    /// <summary>
    /// Gets or sets the track naming formula.
    /// </summary>
    /// <value>The formula.</value>
    public static string Formula { get; set; } = FormulaDefault;

    /// <summary>
    /// The default value for the <see cref="Formula"/> property.
    /// </summary>
    public const string FormulaDefault = @"    {@Ar - }{@Al - }{(@Tn) }{@Tl}";

    /// <summary>
    /// Gets or sets the renamed track naming formula.
    /// </summary>
    public static string FormulaTrackRenamed { get; set; } = FormulaTrackRenamedDefault;

    /// <summary>
    /// The default value for the <see cref="FormulaTrackRenamed"/> property.
    /// </summary>
    public const string FormulaTrackRenamedDefault = @"    {@R}";

    /// <summary>
    /// Gets the display name for the specified track.
    /// </summary>
    /// <param name="albumTrack">The album track.</param>
    /// <returns>A display name for a <see cref="AlbumTrack"/> instance.</returns>
    public static string GetAudioTrackName<TAudioTrack, TAlbum>(this IAlbumTrack<TAudioTrack, TAlbum> albumTrack)
        where TAudioTrack : IAudioTrack where TAlbum : IAlbum
    {
        return GetAudioTrackName(albumTrack.AudioTrack!);
    }

    private static readonly Regex namingRegex = new("\\{.*?@(Ar|Al|Tn|Tl|R).*?\\}", RegexOptions.Compiled);
    private static readonly Regex nonAlphabet = new(@"[^\p{L}]*", RegexOptions.Compiled);
    private static readonly Regex pseudoName = new(@"\s*\(\d*\)\s*track\s*\d*\s*", RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private static readonly Dictionary<string, FormulaType> formulaTypes = new(new KeyValuePair<string, FormulaType>[]
    {
        new("@Ar", FormulaType.Artist),
        new("@Al", FormulaType.Album),
        new("@Tn", FormulaType.TrackNo),
        new("@Tl", FormulaType.Title),
        new("@R", FormulaType.Renamed),
    });

    /// <summary>
    /// Gets or sets the minimum length of the track display name generated by the <see cref="GetAudioTrackName"/> method.
    /// </summary>
    /// <value>The minimum length of the track display name.</value>
    public static int MinimumTrackLength { get; set; } = 5;

    /// <summary>
    /// Gets or sets a value indicating whether to fall back to the track file name if the generated title contains no letters.
    /// </summary>
    /// <value><c>true</c> if to fall back to the track file name if the generated title contains no letters; otherwise, <c>false</c>.</value>
    public static bool TrackNamingFallbackToFileNameWhenNoLetters { get; set; }

    private const int LoopMax = 100;

    /// <summary>
    /// Gets the display name for the specified track.
    /// </summary>
    /// <param name="audioTrack">The album track.</param>
    /// <returns>A display name for a <see cref="AlbumTrack"/> instance.</returns>
    public static string GetAudioTrackName(IAudioTrack audioTrack)
    {
        var formula = string.IsNullOrWhiteSpace(audioTrack.OverrideName) ? Formula : FormulaTrackRenamed;
        var matches = namingRegex.Matches(formula).OrderByDescending(f => f.Index).ThenBy(f => f.Length).ToList();

        var loopCount = 0;

        while (matches.Any())
        {
            if (loopCount > LoopMax)
            {
                // Prevent infinite loop form some "brainless" code-issue.
                break;
            }

            loopCount++;

            var match = matches.First();

            var found = false;

            foreach (var formulaType in formulaTypes)
            {
                var replaceValue = formulaType.Value switch
                {
                    FormulaType.Artist => audioTrack.Artist,
                    FormulaType.Album => audioTrack.Album,
                    FormulaType.TrackNo => audioTrack.Track,
                    FormulaType.Title => audioTrack.Title,
                    FormulaType.Renamed => audioTrack.OverrideName,
                    FormulaType.FileName => Path.GetFileNameWithoutExtension(audioTrack.FileNameNoPath),
                    _ => null,
                };

                // Pad the track number smaller than 10.
                if (formulaType.Value == FormulaType.TrackNo)
                {
                    if (int.TryParse(replaceValue, out var trackNumber))
                    {
                        if (trackNumber < 10)
                        {
                            replaceValue = $"{trackNumber:D2}";
                        }
                    }
                }

                if (match.Value.Contains(formulaType.Key) && !string.IsNullOrWhiteSpace(replaceValue))
                {
                    formula = formula.Remove(match.Index, match.Length);
                    formula = formula.Insert(match.Index,
                        match.Value.TrimStart('{').TrimEnd('}').Replace(formulaType.Key, replaceValue));
                    matches = namingRegex.Matches(formula).OrderByDescending(f => f.Index).ThenBy(f => f.Length)
                        .ToList();
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                formula = formula.Remove(match.Index, match.Length);
                matches = namingRegex.Matches(formula).OrderByDescending(f => f.Index).ThenBy(f => f.Length).ToList();
            }
        }

        var matchNonAlpha = nonAlphabet.Match(formula);
        var allNonAlphabets = matchNonAlpha.Value.Length == formula.Length;
        var pseudoMatch = pseudoName.Match(formula).Length == formula.Length;

        if (string.IsNullOrWhiteSpace(formula) ||
            formula.Trim().Length < MinimumTrackLength ||
            (TrackNamingFallbackToFileNameWhenNoLetters && allNonAlphabets) ||
            pseudoMatch)
        {
            formula = Path.GetFileNameWithoutExtension(audioTrack.FileNameNoPath) ??
                      Path.GetFileNameWithoutExtension(Path.GetFileName(audioTrack.FileName));
        }

        return formula;
    }
}